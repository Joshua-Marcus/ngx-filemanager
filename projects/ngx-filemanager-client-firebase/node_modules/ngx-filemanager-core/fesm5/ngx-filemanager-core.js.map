{"version":3,"file":"ngx-filemanager-core.js.map","sources":["ng://ngx-filemanager-core/lib/core-types.ts"],"sourcesContent":["export namespace CoreTypes {\r\n  export interface ReqBodyAction {\r\n    action: FileManagerAction;\r\n    bucketname: string;\r\n    isAdmin?: boolean;\r\n  }\r\n\r\n  export interface ResultObj {\r\n    success: boolean;\r\n    error?: string;\r\n  }\r\n\r\n  export interface ResBodySuccess {\r\n    result: ResultObj;\r\n  }\r\n\r\n  // LIST\r\n\r\n  export interface ReqBodyList extends ReqBodyAction {\r\n    path: string;\r\n  }\r\n\r\n  export interface ResFile {\r\n    name: string; // filename with extension or directory name\r\n    fullPath: string;\r\n    rightsFirebase: {}[]; // unix string\r\n    permissions: FilePermissionsObject; // unix string\r\n    perms?: string;\r\n    size: string; // bytes\r\n    date: string; // iso format\r\n    type: 'dir' | 'file';\r\n    isPhantomFolder?: boolean;\r\n    metaData?: any;\r\n    downloadUrl?: string;\r\n  }\r\n\r\n  export interface ResBodyList {\r\n    result: ResFile[];\r\n  }\r\n\r\n  // RENAME\r\n\r\n  export interface ReqBodyRename extends ReqBodyAction {\r\n    item: string;\r\n    newItemPath: string;\r\n  }\r\n\r\n  // tslint:disable:no-empty-interface\r\n  export interface ResBodyRename extends ResBodySuccess {}\r\n\r\n  // MOVE\r\n\r\n  export interface ReqBodyMove extends ReqBodyAction {\r\n    items: string[];\r\n    newPath: string;\r\n  }\r\n\r\n  export interface ResBodyMove extends ResBodySuccess {}\r\n\r\n  // COPY\r\n\r\n  export interface ReqBodyCopy extends ReqBodyAction {\r\n    items?: string[];\r\n    singleFileName?: string;\r\n    newPath: string;\r\n  }\r\n\r\n  export interface ResBodyCopy extends ResBodySuccess {}\r\n\r\n  // REMOVE\r\n\r\n  export interface ReqBodyRemove extends ReqBodyAction {\r\n    items?: string[];\r\n  }\r\n\r\n  export interface ResBodyRemove extends ResBodySuccess {}\r\n\r\n  // EDIT\r\n\r\n  export interface ReqBodyEdit extends ReqBodyAction {\r\n    item: string;\r\n    content: string;\r\n  }\r\n\r\n  export interface ResBodyEdit extends ResBodySuccess {}\r\n\r\n  // GETCONTENT\r\n\r\n  export interface ReqBodyGetContent extends ReqBodyAction {\r\n    item: string;\r\n  }\r\n\r\n  export interface ResBodyGetContent {\r\n    result: string;\r\n  }\r\n\r\n  // CREATE FOLDER\r\n\r\n  export interface ReqBodyCreateFolder extends ReqBodyAction {\r\n    newPath: string;\r\n    disableNoClobber?: boolean;\r\n  }\r\n\r\n  export interface ResBodyCreateFolder extends ResBodySuccess {}\r\n\r\n  // SET PERMISSIONS\r\n\r\n  export interface ReqBodySetPermissions extends ReqBodyAction {\r\n    items: string[];\r\n    role: PermissionsRole;\r\n    entity: FilePermissionEntity;\r\n    recursive: boolean;\r\n  }\r\n\r\n  export interface ReqBodySetPermissionsObject extends ReqBodyAction {\r\n    items: string[];\r\n    permissionsObj: FilePermissionsObject;\r\n    recursive: boolean;\r\n  }\r\n\r\n  export interface ResBodySetPermissions extends ResBodySuccess {}\r\n\r\n  // UPLOAD FILE\r\n\r\n  export interface ResBodyUploadFile extends ResBodySuccess {}\r\n\r\n  // UPLOAD FILE\r\n\r\n  export interface ReqBodyGetSingle extends ReqBodyAction {\r\n    item: string;\r\n  }\r\n\r\n  export interface ResBodyGetSingle extends ResBodySuccess {\r\n    result: {\r\n      url: string;\r\n      file: ResFile;\r\n      success: boolean;\r\n      error?: string;\r\n    };\r\n  }\r\n\r\n  // MISC\r\n\r\n  export type FileManagerAction =\r\n    | 'list'\r\n    | 'rename'\r\n    | 'move'\r\n    | 'copy'\r\n    | 'remove'\r\n    | 'edit'\r\n    | 'getContent'\r\n    | 'getSingle'\r\n    | 'createFolder'\r\n    | 'changePermissions'\r\n    | 'changePermissionsObject'\r\n    | 'compress'\r\n    | 'extract'\r\n    | 'downloadMultiple';\r\n\r\n  export type UserId = string;\r\n  export type GroupId = string;\r\n  export type FilePermissionEntity = UserId | GroupId;\r\n  export type FilePermissionOthers = 'read' | 'read/write' | 'hidden';\r\n\r\n  export interface FilePermissionsObject {\r\n    readers: FilePermissionEntity[];\r\n    writers: FilePermissionEntity[];\r\n    others: FilePermissionOthers;\r\n  }\r\n\r\n  export interface FirebaseToken {\r\n    iss?: string;\r\n    aud?: string;\r\n    auth_time?: number; // 1554958496,\r\n    user_id?: string; // 'NNISABcisBAHCIJasbchjashcbaSCJK',\r\n    sub?: string; // (subject) 'NNISABcisBAHCIJasbchjashcbaSCJK',\r\n    iat?: number;\r\n    exp?: number;\r\n    email?: string;\r\n    email_verified?: boolean;\r\n    firebase?: { identities: [{}]; sign_in_provider: string };\r\n  }\r\n\r\n  export interface UserCustomClaims extends FirebaseToken {\r\n    groups: string[];\r\n    userIsSudo?: boolean;\r\n  }\r\n\r\n  export type PermissionsRole = 'OWNER' | 'READER' | 'WRITER';\r\n}\r\n"],"names":[],"mappings":";;;;AAAA,IAAiB,SAAS,CA6LzB;AA7LD,WAAiB,SAAS;;;;IACxB,4BAIC;;;;;IAED,wBAGC;;;;;IAED,6BAEC;;;;;IAID,0BAEC;;;;;IAED,sBAYC;;;;;IAED,0BAEC;;;;;IAID,4BAGC;;;;;IAGD,4BAAwD;;;;;IAIxD,0BAGC;;;;;IAED,0BAAsD;;;;;IAItD,0BAIC;;;;;IAED,0BAAsD;;;;;IAItD,4BAEC;;;;;IAED,4BAAwD;;;;;IAIxD,0BAGC;;;;;IAED,0BAAsD;;;;;IAItD,gCAEC;;;;;IAED,gCAEC;;;;;IAID,kCAGC;;;;;IAED,kCAA8D;;;;;IAI9D,oCAKC;;;;;IAED,0CAIC;;;;;IAED,oCAAgE;;;;;IAIhE,gCAA4D;;;;;IAI5D,+BAEC;;;;;IAED,+BAOC;;;;;IAyBD,oCAIC;;;;;IAED,4BAWC;;;;;IAED,+BAGC;;AAGH,CAAC,EA7LgB,SAAS,KAAT,SAAS,QA6LzB;;;;;;;;;;;;;;;"}
