export declare namespace CoreTypes {
    interface ReqBodyAction {
        action: FileManagerAction;
        bucketname: string;
        isAdmin?: boolean;
    }
    interface ResultObj {
        success: boolean;
        error?: string;
    }
    interface ResBodySuccess {
        result: ResultObj;
    }
    interface ReqBodyList extends ReqBodyAction {
        path: string;
    }
    interface ResFile {
        name: string;
        fullPath: string;
        rightsFirebase: {}[];
        permissions: FilePermissionsObject;
        perms?: string;
        size: string;
        date: string;
        type: 'dir' | 'file';
        isPhantomFolder?: boolean;
        metaData?: any;
        downloadUrl?: string;
    }
    interface ResBodyList {
        result: ResFile[];
    }
    interface ReqBodyRename extends ReqBodyAction {
        item: string;
        newItemPath: string;
    }
    interface ResBodyRename extends ResBodySuccess {
    }
    interface ReqBodyMove extends ReqBodyAction {
        items: string[];
        newPath: string;
    }
    interface ResBodyMove extends ResBodySuccess {
    }
    interface ReqBodyCopy extends ReqBodyAction {
        items?: string[];
        singleFileName?: string;
        newPath: string;
    }
    interface ResBodyCopy extends ResBodySuccess {
    }
    interface ReqBodyRemove extends ReqBodyAction {
        items?: string[];
    }
    interface ResBodyRemove extends ResBodySuccess {
    }
    interface ReqBodyEdit extends ReqBodyAction {
        item: string;
        content: string;
    }
    interface ResBodyEdit extends ResBodySuccess {
    }
    interface ReqBodyGetContent extends ReqBodyAction {
        item: string;
    }
    interface ResBodyGetContent {
        result: string;
    }
    interface ReqBodyCreateFolder extends ReqBodyAction {
        newPath: string;
        disableNoClobber?: boolean;
    }
    interface ResBodyCreateFolder extends ResBodySuccess {
    }
    interface ReqBodySetPermissions extends ReqBodyAction {
        items: string[];
        role: PermissionsRole;
        entity: FilePermissionEntity;
        recursive: boolean;
    }
    interface ReqBodySetPermissionsObject extends ReqBodyAction {
        items: string[];
        permissionsObj: FilePermissionsObject;
        recursive: boolean;
    }
    interface ResBodySetPermissions extends ResBodySuccess {
    }
    interface ResBodyUploadFile extends ResBodySuccess {
    }
    interface ReqBodyGetSingle extends ReqBodyAction {
        item: string;
    }
    interface ResBodyGetSingle extends ResBodySuccess {
        result: {
            url: string;
            file: ResFile;
            success: boolean;
            error?: string;
        };
    }
    type FileManagerAction = 'list' | 'rename' | 'move' | 'copy' | 'remove' | 'edit' | 'getContent' | 'getSingle' | 'createFolder' | 'changePermissions' | 'changePermissionsObject' | 'compress' | 'extract' | 'downloadMultiple';
    type UserId = string;
    type GroupId = string;
    type FilePermissionEntity = UserId | GroupId;
    type FilePermissionOthers = 'read' | 'read/write' | 'hidden';
    interface FilePermissionsObject {
        readers: FilePermissionEntity[];
        writers: FilePermissionEntity[];
        others: FilePermissionOthers;
    }
    interface FirebaseToken {
        iss?: string;
        aud?: string;
        auth_time?: number;
        user_id?: string;
        sub?: string;
        iat?: number;
        exp?: number;
        email?: string;
        email_verified?: boolean;
        firebase?: {
            identities: [{}];
            sign_in_provider: string;
        };
    }
    interface UserCustomClaims extends FirebaseToken {
        groups: string[];
        userIsSudo?: boolean;
    }
    type PermissionsRole = 'OWNER' | 'READER' | 'WRITER';
}
