import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { buildURI } from './util';
var CsvDirective = /** @class */ (function () {
    function CsvDirective(sanitizer) {
        this.sanitizer = sanitizer;
        /** the body of the csv */
        this.data = [];
        /** Set the seperator between values */
        this.delimiter = ',';
        /** adds a Byte order mark to setup the csv as UTF-8  */
        this.uFEFF = true;
        /** filename */
        this.download = 'data.csv';
        this.target = '_blank';
    }
    Object.defineProperty(CsvDirective.prototype, "filename", {
        /** Set the filename of the csv. Default is `data.csv` */
        set: function (a) {
            this.download = a;
        },
        enumerable: true,
        configurable: true
    });
    CsvDirective.prototype.ngOnChanges = function () {
        this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "data", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], CsvDirective.prototype, "headers", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "delimiter", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], CsvDirective.prototype, "filename", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "uFEFF", void 0);
    tslib_1.__decorate([
        HostBinding(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "href", void 0);
    tslib_1.__decorate([
        HostBinding(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "download", void 0);
    tslib_1.__decorate([
        Input(), HostBinding(),
        tslib_1.__metadata("design:type", Object)
    ], CsvDirective.prototype, "target", void 0);
    CsvDirective = tslib_1.__decorate([
        Directive({ selector: '[csvLink]' }),
        tslib_1.__metadata("design:paramtypes", [DomSanitizer])
    ], CsvDirective);
    return CsvDirective;
}());
export { CsvDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjdHJsL25neC1jc3YvIiwic291cmNlcyI6WyJjc3YuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBbUIsTUFBTSwyQkFBMkIsQ0FBQztBQUUxRSxPQUFPLEVBQUUsUUFBUSxFQUFhLE1BQU0sUUFBUSxDQUFDO0FBRzdDO0lBa0JFLHNCQUFvQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBakIzQywwQkFBMEI7UUFDakIsU0FBSSxHQUE4RCxFQUFFLENBQUM7UUFHOUUsdUNBQXVDO1FBQzlCLGNBQVMsR0FBRyxHQUFHLENBQUM7UUFNekIsd0RBQXdEO1FBQy9DLFVBQUssR0FBRyxJQUFJLENBQUM7UUFFdEIsZUFBZTtRQUNBLGFBQVEsR0FBRyxVQUFVLENBQUM7UUFDYixXQUFNLEdBQUcsUUFBUSxDQUFDO0lBQ0ksQ0FBQztJQVQvQyxzQkFBSSxrQ0FBUTtRQUZaLHlEQUF5RDthQUV6RCxVQUFhLENBQVM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7UUFDcEIsQ0FBQzs7O09BQUE7SUFTRCxrQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUN2RCxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUM5RCxDQUFDO0lBQ0osQ0FBQztJQXRCUTtRQUFSLEtBQUssRUFBRTs7OENBQXNFO0lBRXJFO1FBQVIsS0FBSyxFQUFFOztpREFBa0M7SUFFakM7UUFBUixLQUFLLEVBQUU7O21EQUFpQjtJQUd6QjtRQURDLEtBQUssRUFBRTs7O2dEQUdQO0lBRVE7UUFBUixLQUFLLEVBQUU7OytDQUFjO0lBQ1A7UUFBZCxXQUFXLEVBQUU7OzhDQUF3QjtJQUV2QjtRQUFkLFdBQVcsRUFBRTs7a0RBQXVCO0lBQ2I7UUFBdkIsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFOztnREFBbUI7SUFqQi9CLFlBQVk7UUFEeEIsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDO2lEQW1CSixZQUFZO09BbEJoQyxZQUFZLENBeUJ4QjtJQUFELG1CQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0F6QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVJlc291cmNlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IGJ1aWxkVVJJLCBIZWFkZXJPYmogfSBmcm9tICcuL3V0aWwnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbY3N2TGlua10nIH0pXG5leHBvcnQgY2xhc3MgQ3N2RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgLyoqIHRoZSBib2R5IG9mIHRoZSBjc3YgKi9cbiAgQElucHV0KCkgZGF0YTogc3RyaW5nIHwgc3RyaW5nW11bXSB8IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1bXSB8IGFueVtdID0gW107XG4gIC8qKiBTZXQgdGhlIGZpcnN0IGxpbmUgb2YgdGhlIGNzdiAqL1xuICBASW5wdXQoKSBoZWFkZXJzPzogc3RyaW5nW10gfCBIZWFkZXJPYmpbXTtcbiAgLyoqIFNldCB0aGUgc2VwZXJhdG9yIGJldHdlZW4gdmFsdWVzICovXG4gIEBJbnB1dCgpIGRlbGltaXRlciA9ICcsJztcbiAgLyoqIFNldCB0aGUgZmlsZW5hbWUgb2YgdGhlIGNzdi4gRGVmYXVsdCBpcyBgZGF0YS5jc3ZgICovXG4gIEBJbnB1dCgpXG4gIHNldCBmaWxlbmFtZShhOiBzdHJpbmcpIHtcbiAgICB0aGlzLmRvd25sb2FkID0gYTtcbiAgfVxuICAvKiogYWRkcyBhIEJ5dGUgb3JkZXIgbWFyayB0byBzZXR1cCB0aGUgY3N2IGFzIFVURi04ICAqL1xuICBASW5wdXQoKSB1RkVGRiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygpIGhyZWY/OiBTYWZlUmVzb3VyY2VVcmw7XG4gIC8qKiBmaWxlbmFtZSAqL1xuICBASG9zdEJpbmRpbmcoKSBkb3dubG9hZCA9ICdkYXRhLmNzdic7XG4gIEBJbnB1dCgpIEBIb3N0QmluZGluZygpIHRhcmdldCA9ICdfYmxhbmsnO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuaHJlZiA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChcbiAgICAgIGJ1aWxkVVJJKHRoaXMuZGF0YSwgdGhpcy51RkVGRiwgdGhpcy5oZWFkZXJzLCB0aGlzLmRlbGltaXRlciksXG4gICAgKTtcbiAgfVxufVxuIl19