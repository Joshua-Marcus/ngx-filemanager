import * as tslib_1 from "tslib";
export var isJsons = function (array) {
    return Array.isArray(array) &&
        array.every(function (row) { return typeof row === 'object' && !(row instanceof Array); });
};
export var isArrays = function (array) {
    return Array.isArray(array) && array.every(function (row) { return Array.isArray(row); });
};
export function jsonsHeaders(array) {
    return Array.from(new Set(array.map(function (item) { return Object.keys(item); }).reduce(function (a, b) { return tslib_1.__spread(a, b); }, [])));
}
export function jsons2arrays(jsons, headers) {
    headers = headers || jsonsHeaders(jsons);
    // allow headers to have custom labels, defaulting to having the header data key be the label
    var headerLabels = headers;
    var headerKeys = headers;
    if (isJsons(headers)) {
        headerLabels = headers.map(function (header) { return header.label; });
        headerKeys = headers.map(function (header) { return header.key; });
    }
    var data = jsons.map(function (object) {
        return headerKeys.map(function (header) { return (header in object ? object[header] : ''); });
    });
    return tslib_1.__spread([headerLabels], data);
}
export var elementOrEmpty = function (element) {
    return element || element === 0 ? element : '';
};
export function joiner(data, delimiter) {
    if (delimiter === void 0) { delimiter = ','; }
    return data
        .map(function (row, index) {
        return row.map(function (element) { return '"' + elementOrEmpty(element) + '"'; }).join(delimiter);
    })
        .join("\n");
}
export function arrays2csv(data, headers, delimiter) {
    return joiner(headers ? tslib_1.__spread([headers], data) : data, delimiter);
}
export function jsons2csv(data, headers, delimiter) {
    return joiner(jsons2arrays(data, headers), delimiter);
}
export function string2csv(data, headers, delimiter) {
    return headers ? headers.join(delimiter) + "\n" + data : data;
}
export function toCSV(data, headers, delimiter) {
    if (isJsons(data)) {
        return jsons2csv(data, headers, delimiter);
    }
    if (isArrays(data)) {
        return arrays2csv(data, headers, delimiter);
    }
    if (typeof data === 'string') {
        return string2csv(data, headers, delimiter);
    }
    throw new TypeError("Data should be a \"String\", \"Array of arrays\" OR \"Array of objects\" ");
}
export function buildURI(data, uFEFF, headers, delimiter) {
    if (uFEFF === void 0) { uFEFF = true; }
    var csv = toCSV(data, headers, delimiter);
    var blob = new Blob([uFEFF ? '\uFEFF' : '', csv], { type: 'text/csv' });
    return URL.createObjectURL(blob);
}
//# sourceMappingURL=data:application/json;base64,