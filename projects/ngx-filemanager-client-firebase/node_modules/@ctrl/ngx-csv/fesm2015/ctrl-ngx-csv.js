import { __decorate, __metadata } from 'tslib';
import { Input, HostBinding, Directive, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

const isJsons = (array) => Array.isArray(array) &&
    array.every(row => typeof row === 'object' && !(row instanceof Array));
const isArrays = (array) => Array.isArray(array) && array.every(row => Array.isArray(row));
function jsonsHeaders(array) {
    return Array.from(new Set(array.map(item => Object.keys(item)).reduce((a, b) => [...a, ...b], [])));
}
function jsons2arrays(jsons, headers) {
    headers = headers || jsonsHeaders(jsons);
    // allow headers to have custom labels, defaulting to having the header data key be the label
    let headerLabels = headers;
    let headerKeys = headers;
    if (isJsons(headers)) {
        headerLabels = headers.map(header => header.label);
        headerKeys = headers.map(header => header.key);
    }
    const data = jsons.map(object => headerKeys.map(header => (header in object ? object[header] : '')));
    return [headerLabels, ...data];
}
const elementOrEmpty = (element) => element || element === 0 ? element : '';
function joiner(data, delimiter = ',') {
    return data
        .map((row, index) => row.map((element) => '"' + elementOrEmpty(element) + '"').join(delimiter))
        .join(`\n`);
}
function arrays2csv(data, headers, delimiter) {
    return joiner(headers ? [headers, ...data] : data, delimiter);
}
function jsons2csv(data, headers, delimiter) {
    return joiner(jsons2arrays(data, headers), delimiter);
}
function string2csv(data, headers, delimiter) {
    return headers ? `${headers.join(delimiter)}\n${data}` : data;
}
function toCSV(data, headers, delimiter) {
    if (isJsons(data)) {
        return jsons2csv(data, headers, delimiter);
    }
    if (isArrays(data)) {
        return arrays2csv(data, headers, delimiter);
    }
    if (typeof data === 'string') {
        return string2csv(data, headers, delimiter);
    }
    throw new TypeError(`Data should be a "String", "Array of arrays" OR "Array of objects" `);
}
function buildURI(data, uFEFF = true, headers, delimiter) {
    const csv = toCSV(data, headers, delimiter);
    const blob = new Blob([uFEFF ? '\uFEFF' : '', csv], { type: 'text/csv' });
    return URL.createObjectURL(blob);
}

let CsvDirective = class CsvDirective {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        /** the body of the csv */
        this.data = [];
        /** Set the seperator between values */
        this.delimiter = ',';
        /** adds a Byte order mark to setup the csv as UTF-8  */
        this.uFEFF = true;
        /** filename */
        this.download = 'data.csv';
        this.target = '_blank';
    }
    /** Set the filename of the csv. Default is `data.csv` */
    set filename(a) {
        this.download = a;
    }
    ngOnChanges() {
        this.href = this.sanitizer.bypassSecurityTrustResourceUrl(buildURI(this.data, this.uFEFF, this.headers, this.delimiter));
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], CsvDirective.prototype, "headers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "delimiter", void 0);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], CsvDirective.prototype, "filename", null);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "uFEFF", void 0);
__decorate([
    HostBinding(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "href", void 0);
__decorate([
    HostBinding(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "download", void 0);
__decorate([
    Input(), HostBinding(),
    __metadata("design:type", Object)
], CsvDirective.prototype, "target", void 0);
CsvDirective = __decorate([
    Directive({ selector: '[csvLink]' }),
    __metadata("design:paramtypes", [DomSanitizer])
], CsvDirective);

let CsvModule = class CsvModule {
};
CsvModule = __decorate([
    NgModule({
        declarations: [CsvDirective],
        exports: [CsvDirective],
    })
], CsvModule);

export { CsvDirective, CsvModule, arrays2csv, buildURI, elementOrEmpty, isArrays, isJsons, joiner, jsons2arrays, jsons2csv, jsonsHeaders, string2csv, toCSV };
//# sourceMappingURL=ctrl-ngx-csv.js.map
